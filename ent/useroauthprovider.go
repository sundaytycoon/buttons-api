// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/sundaytycoon/buttons-api/ent/user"
	"github.com/sundaytycoon/buttons-api/ent/useroauthprovider"
)

// UserOAuthProvider is the model entity for the UserOAuthProvider schema.
type UserOAuthProvider struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	// 해당 row를 최초로 만든 시간은 언제인지?
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	// 해당 row를 최초로 만든 주체는 누구인지?
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	// 해당 row를 수정한 마지막 시간은 언제인지
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	// 해당 row를 수정한 마지막 주체 누구인지
	UpdatedBy string `json:"updated_by,omitempty"`
	// Status holds the value of the "status" field.
	// 해당 사용자는 서비스에서 유효한지 아닌지
	Status useroauthprovider.Status `json:"status,omitempty"`
	// Provider holds the value of the "provider" field.
	// 어떤 Oauth provider를 이용하였는지?
	Provider useroauthprovider.Provider `json:"provider,omitempty"`
	// Expiry holds the value of the "expiry" field.
	// 해당 토큰의 만료시간이 언제까지인지?
	Expiry time.Time `json:"expiry,omitempty"`
	// AccessToken holds the value of the "access_token" field.
	// access_token
	AccessToken string `json:"access_token,omitempty"`
	// RefreshToken holds the value of the "refresh_token" field.
	// refresh_token
	RefreshToken string `json:"refresh_token,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserOAuthProviderQuery when eager-loading is set.
	Edges UserOAuthProviderEdges `json:"edges"`
}

// UserOAuthProviderEdges holds the relations/edges for other nodes in the graph.
type UserOAuthProviderEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserOAuthProviderEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserOAuthProvider) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case useroauthprovider.FieldID, useroauthprovider.FieldUserID, useroauthprovider.FieldCreatedBy, useroauthprovider.FieldUpdatedBy, useroauthprovider.FieldStatus, useroauthprovider.FieldProvider, useroauthprovider.FieldAccessToken, useroauthprovider.FieldRefreshToken:
			values[i] = new(sql.NullString)
		case useroauthprovider.FieldCreatedAt, useroauthprovider.FieldUpdatedAt, useroauthprovider.FieldExpiry:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserOAuthProvider", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserOAuthProvider fields.
func (uop *UserOAuthProvider) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case useroauthprovider.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				uop.ID = value.String
			}
		case useroauthprovider.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				uop.UserID = value.String
			}
		case useroauthprovider.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uop.CreatedAt = value.Time
			}
		case useroauthprovider.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				uop.CreatedBy = value.String
			}
		case useroauthprovider.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				uop.UpdatedAt = value.Time
			}
		case useroauthprovider.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				uop.UpdatedBy = value.String
			}
		case useroauthprovider.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				uop.Status = useroauthprovider.Status(value.String)
			}
		case useroauthprovider.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				uop.Provider = useroauthprovider.Provider(value.String)
			}
		case useroauthprovider.FieldExpiry:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiry", values[i])
			} else if value.Valid {
				uop.Expiry = value.Time
			}
		case useroauthprovider.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				uop.AccessToken = value.String
			}
		case useroauthprovider.FieldRefreshToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token", values[i])
			} else if value.Valid {
				uop.RefreshToken = value.String
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the UserOAuthProvider entity.
func (uop *UserOAuthProvider) QueryUser() *UserQuery {
	return (&UserOAuthProviderClient{config: uop.config}).QueryUser(uop)
}

// Update returns a builder for updating this UserOAuthProvider.
// Note that you need to call UserOAuthProvider.Unwrap() before calling this method if this UserOAuthProvider
// was returned from a transaction, and the transaction was committed or rolled back.
func (uop *UserOAuthProvider) Update() *UserOAuthProviderUpdateOne {
	return (&UserOAuthProviderClient{config: uop.config}).UpdateOne(uop)
}

// Unwrap unwraps the UserOAuthProvider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uop *UserOAuthProvider) Unwrap() *UserOAuthProvider {
	tx, ok := uop.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserOAuthProvider is not a transactional entity")
	}
	uop.config.driver = tx.drv
	return uop
}

// String implements the fmt.Stringer.
func (uop *UserOAuthProvider) String() string {
	var builder strings.Builder
	builder.WriteString("UserOAuthProvider(")
	builder.WriteString(fmt.Sprintf("id=%v", uop.ID))
	builder.WriteString(", user_id=")
	builder.WriteString(uop.UserID)
	builder.WriteString(", created_at=")
	builder.WriteString(uop.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", created_by=")
	builder.WriteString(uop.CreatedBy)
	builder.WriteString(", updated_at=")
	builder.WriteString(uop.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_by=")
	builder.WriteString(uop.UpdatedBy)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", uop.Status))
	builder.WriteString(", provider=")
	builder.WriteString(fmt.Sprintf("%v", uop.Provider))
	builder.WriteString(", expiry=")
	builder.WriteString(uop.Expiry.Format(time.ANSIC))
	builder.WriteString(", access_token=")
	builder.WriteString(uop.AccessToken)
	builder.WriteString(", refresh_token=")
	builder.WriteString(uop.RefreshToken)
	builder.WriteByte(')')
	return builder.String()
}

// UserOAuthProviders is a parsable slice of UserOAuthProvider.
type UserOAuthProviders []*UserOAuthProvider

func (uop UserOAuthProviders) config(cfg config) {
	for _i := range uop {
		uop[_i].config = cfg
	}
}
