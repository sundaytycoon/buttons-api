// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/sundaytycoon/buttons-api/ent/user"
	"github.com/sundaytycoon/buttons-api/ent/userdevice"
)

// UserDevice is the model entity for the UserDevice schema.
type UserDevice struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	// 해당 row를 최초로 만든 시간은 언제인지?
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	// 해당 row를 최초로 만든 주체는 누구인지?
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	// 해당 row를 수정한 마지막 시간은 언제인지
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	// 해당 row를 수정한 마지막 주체 누구인지
	UpdatedBy string `json:"updated_by,omitempty"`
	// Status holds the value of the "status" field.
	// 해당 row는 쓸 수 있는지? 없는지?
	Status userdevice.Status `json:"status,omitempty"`
	// Type holds the value of the "type" field.
	// 모바일 사용자인지, 데스크탑 사용자인지?
	Type userdevice.Type `json:"type,omitempty"`
	// Os holds the value of the "os" field.
	// 어떤 운영체제에서 접속 했는지?
	Os userdevice.Os `json:"os,omitempty"`
	// Platform holds the value of the "platform" field.
	// 브라우저라면, 어떤 브라우저에서 사용하고 있는지?
	Platform userdevice.Platform `json:"platform,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserDeviceQuery when eager-loading is set.
	Edges UserDeviceEdges `json:"edges"`
}

// UserDeviceEdges holds the relations/edges for other nodes in the graph.
type UserDeviceEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserDeviceEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserDevice) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userdevice.FieldID, userdevice.FieldUserID, userdevice.FieldCreatedBy, userdevice.FieldUpdatedBy, userdevice.FieldStatus, userdevice.FieldType, userdevice.FieldOs, userdevice.FieldPlatform:
			values[i] = new(sql.NullString)
		case userdevice.FieldCreatedAt, userdevice.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserDevice", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserDevice fields.
func (ud *UserDevice) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userdevice.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ud.ID = value.String
			}
		case userdevice.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ud.UserID = value.String
			}
		case userdevice.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ud.CreatedAt = value.Time
			}
		case userdevice.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ud.CreatedBy = value.String
			}
		case userdevice.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ud.UpdatedAt = value.Time
			}
		case userdevice.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ud.UpdatedBy = value.String
			}
		case userdevice.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ud.Status = userdevice.Status(value.String)
			}
		case userdevice.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ud.Type = userdevice.Type(value.String)
			}
		case userdevice.FieldOs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os", values[i])
			} else if value.Valid {
				ud.Os = userdevice.Os(value.String)
			}
		case userdevice.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				ud.Platform = userdevice.Platform(value.String)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the UserDevice entity.
func (ud *UserDevice) QueryUser() *UserQuery {
	return (&UserDeviceClient{config: ud.config}).QueryUser(ud)
}

// Update returns a builder for updating this UserDevice.
// Note that you need to call UserDevice.Unwrap() before calling this method if this UserDevice
// was returned from a transaction, and the transaction was committed or rolled back.
func (ud *UserDevice) Update() *UserDeviceUpdateOne {
	return (&UserDeviceClient{config: ud.config}).UpdateOne(ud)
}

// Unwrap unwraps the UserDevice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ud *UserDevice) Unwrap() *UserDevice {
	tx, ok := ud.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserDevice is not a transactional entity")
	}
	ud.config.driver = tx.drv
	return ud
}

// String implements the fmt.Stringer.
func (ud *UserDevice) String() string {
	var builder strings.Builder
	builder.WriteString("UserDevice(")
	builder.WriteString(fmt.Sprintf("id=%v", ud.ID))
	builder.WriteString(", user_id=")
	builder.WriteString(ud.UserID)
	builder.WriteString(", created_at=")
	builder.WriteString(ud.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", created_by=")
	builder.WriteString(ud.CreatedBy)
	builder.WriteString(", updated_at=")
	builder.WriteString(ud.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_by=")
	builder.WriteString(ud.UpdatedBy)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", ud.Status))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", ud.Type))
	builder.WriteString(", os=")
	builder.WriteString(fmt.Sprintf("%v", ud.Os))
	builder.WriteString(", platform=")
	builder.WriteString(fmt.Sprintf("%v", ud.Platform))
	builder.WriteByte(')')
	return builder.String()
}

// UserDevices is a parsable slice of UserDevice.
type UserDevices []*UserDevice

func (ud UserDevices) config(cfg config) {
	for _i := range ud {
		ud[_i].config = cfg
	}
}
