// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sundaytycoon/buttons-api/ent/predicate"
	"github.com/sundaytycoon/buttons-api/ent/user"
	"github.com/sundaytycoon/buttons-api/ent/usermeta"
)

// UserMetaUpdate is the builder for updating UserMeta entities.
type UserMetaUpdate struct {
	config
	hooks    []Hook
	mutation *UserMetaMutation
}

// Where appends a list predicates to the UserMetaUpdate builder.
func (umu *UserMetaUpdate) Where(ps ...predicate.UserMeta) *UserMetaUpdate {
	umu.mutation.Where(ps...)
	return umu
}

// SetUserID sets the "user_id" field.
func (umu *UserMetaUpdate) SetUserID(s string) *UserMetaUpdate {
	umu.mutation.SetUserID(s)
	return umu
}

// SetCreatedAt sets the "created_at" field.
func (umu *UserMetaUpdate) SetCreatedAt(t time.Time) *UserMetaUpdate {
	umu.mutation.SetCreatedAt(t)
	return umu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (umu *UserMetaUpdate) SetNillableCreatedAt(t *time.Time) *UserMetaUpdate {
	if t != nil {
		umu.SetCreatedAt(*t)
	}
	return umu
}

// SetCreatedBy sets the "created_by" field.
func (umu *UserMetaUpdate) SetCreatedBy(s string) *UserMetaUpdate {
	umu.mutation.SetCreatedBy(s)
	return umu
}

// SetUpdatedAt sets the "updated_at" field.
func (umu *UserMetaUpdate) SetUpdatedAt(t time.Time) *UserMetaUpdate {
	umu.mutation.SetUpdatedAt(t)
	return umu
}

// SetUpdatedBy sets the "updated_by" field.
func (umu *UserMetaUpdate) SetUpdatedBy(s string) *UserMetaUpdate {
	umu.mutation.SetUpdatedBy(s)
	return umu
}

// SetProfile sets the "profile" field.
func (umu *UserMetaUpdate) SetProfile(s string) *UserMetaUpdate {
	umu.mutation.SetProfile(s)
	return umu
}

// SetUser sets the "user" edge to the User entity.
func (umu *UserMetaUpdate) SetUser(u *User) *UserMetaUpdate {
	return umu.SetUserID(u.ID)
}

// Mutation returns the UserMetaMutation object of the builder.
func (umu *UserMetaUpdate) Mutation() *UserMetaMutation {
	return umu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (umu *UserMetaUpdate) ClearUser() *UserMetaUpdate {
	umu.mutation.ClearUser()
	return umu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (umu *UserMetaUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	umu.defaults()
	if len(umu.hooks) == 0 {
		if err = umu.check(); err != nil {
			return 0, err
		}
		affected, err = umu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMetaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = umu.check(); err != nil {
				return 0, err
			}
			umu.mutation = mutation
			affected, err = umu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(umu.hooks) - 1; i >= 0; i-- {
			if umu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = umu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, umu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (umu *UserMetaUpdate) SaveX(ctx context.Context) int {
	affected, err := umu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (umu *UserMetaUpdate) Exec(ctx context.Context) error {
	_, err := umu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umu *UserMetaUpdate) ExecX(ctx context.Context) {
	if err := umu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (umu *UserMetaUpdate) defaults() {
	if _, ok := umu.mutation.UpdatedAt(); !ok {
		v := usermeta.UpdateDefaultUpdatedAt()
		umu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umu *UserMetaUpdate) check() error {
	if _, ok := umu.mutation.UserID(); umu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserMeta.user"`)
	}
	return nil
}

func (umu *UserMetaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usermeta.Table,
			Columns: usermeta.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: usermeta.FieldID,
			},
		},
	}
	if ps := umu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := umu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usermeta.FieldCreatedAt,
		})
	}
	if value, ok := umu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermeta.FieldCreatedBy,
		})
	}
	if value, ok := umu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usermeta.FieldUpdatedAt,
		})
	}
	if value, ok := umu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermeta.FieldUpdatedBy,
		})
	}
	if value, ok := umu.mutation.Profile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermeta.FieldProfile,
		})
	}
	if umu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermeta.UserTable,
			Columns: []string{usermeta.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermeta.UserTable,
			Columns: []string{usermeta.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, umu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermeta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserMetaUpdateOne is the builder for updating a single UserMeta entity.
type UserMetaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMetaMutation
}

// SetUserID sets the "user_id" field.
func (umuo *UserMetaUpdateOne) SetUserID(s string) *UserMetaUpdateOne {
	umuo.mutation.SetUserID(s)
	return umuo
}

// SetCreatedAt sets the "created_at" field.
func (umuo *UserMetaUpdateOne) SetCreatedAt(t time.Time) *UserMetaUpdateOne {
	umuo.mutation.SetCreatedAt(t)
	return umuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (umuo *UserMetaUpdateOne) SetNillableCreatedAt(t *time.Time) *UserMetaUpdateOne {
	if t != nil {
		umuo.SetCreatedAt(*t)
	}
	return umuo
}

// SetCreatedBy sets the "created_by" field.
func (umuo *UserMetaUpdateOne) SetCreatedBy(s string) *UserMetaUpdateOne {
	umuo.mutation.SetCreatedBy(s)
	return umuo
}

// SetUpdatedAt sets the "updated_at" field.
func (umuo *UserMetaUpdateOne) SetUpdatedAt(t time.Time) *UserMetaUpdateOne {
	umuo.mutation.SetUpdatedAt(t)
	return umuo
}

// SetUpdatedBy sets the "updated_by" field.
func (umuo *UserMetaUpdateOne) SetUpdatedBy(s string) *UserMetaUpdateOne {
	umuo.mutation.SetUpdatedBy(s)
	return umuo
}

// SetProfile sets the "profile" field.
func (umuo *UserMetaUpdateOne) SetProfile(s string) *UserMetaUpdateOne {
	umuo.mutation.SetProfile(s)
	return umuo
}

// SetUser sets the "user" edge to the User entity.
func (umuo *UserMetaUpdateOne) SetUser(u *User) *UserMetaUpdateOne {
	return umuo.SetUserID(u.ID)
}

// Mutation returns the UserMetaMutation object of the builder.
func (umuo *UserMetaUpdateOne) Mutation() *UserMetaMutation {
	return umuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (umuo *UserMetaUpdateOne) ClearUser() *UserMetaUpdateOne {
	umuo.mutation.ClearUser()
	return umuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (umuo *UserMetaUpdateOne) Select(field string, fields ...string) *UserMetaUpdateOne {
	umuo.fields = append([]string{field}, fields...)
	return umuo
}

// Save executes the query and returns the updated UserMeta entity.
func (umuo *UserMetaUpdateOne) Save(ctx context.Context) (*UserMeta, error) {
	var (
		err  error
		node *UserMeta
	)
	umuo.defaults()
	if len(umuo.hooks) == 0 {
		if err = umuo.check(); err != nil {
			return nil, err
		}
		node, err = umuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMetaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = umuo.check(); err != nil {
				return nil, err
			}
			umuo.mutation = mutation
			node, err = umuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(umuo.hooks) - 1; i >= 0; i-- {
			if umuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = umuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, umuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (umuo *UserMetaUpdateOne) SaveX(ctx context.Context) *UserMeta {
	node, err := umuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (umuo *UserMetaUpdateOne) Exec(ctx context.Context) error {
	_, err := umuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umuo *UserMetaUpdateOne) ExecX(ctx context.Context) {
	if err := umuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (umuo *UserMetaUpdateOne) defaults() {
	if _, ok := umuo.mutation.UpdatedAt(); !ok {
		v := usermeta.UpdateDefaultUpdatedAt()
		umuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umuo *UserMetaUpdateOne) check() error {
	if _, ok := umuo.mutation.UserID(); umuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserMeta.user"`)
	}
	return nil
}

func (umuo *UserMetaUpdateOne) sqlSave(ctx context.Context) (_node *UserMeta, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usermeta.Table,
			Columns: usermeta.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: usermeta.FieldID,
			},
		},
	}
	id, ok := umuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserMeta.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := umuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usermeta.FieldID)
		for _, f := range fields {
			if !usermeta.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usermeta.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := umuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := umuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usermeta.FieldCreatedAt,
		})
	}
	if value, ok := umuo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermeta.FieldCreatedBy,
		})
	}
	if value, ok := umuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usermeta.FieldUpdatedAt,
		})
	}
	if value, ok := umuo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermeta.FieldUpdatedBy,
		})
	}
	if value, ok := umuo.mutation.Profile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermeta.FieldProfile,
		})
	}
	if umuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermeta.UserTable,
			Columns: []string{usermeta.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := umuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usermeta.UserTable,
			Columns: []string{usermeta.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserMeta{config: umuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, umuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermeta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
