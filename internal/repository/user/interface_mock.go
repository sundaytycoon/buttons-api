// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	domain "github.com/sundaytycoon/profile.me-server/internal/constants/model"
	"github.com/sundaytycoon/profile.me-server/internal/infrastructure/mysql"
)

// MockuserStore is a mock of userStore interface.
type MockuserStore struct {
	ctrl     *gomock.Controller
	recorder *MockuserStoreMockRecorder
}

// MockuserStoreMockRecorder is the mock recorder for MockuserStore.
type MockuserStoreMockRecorder struct {
	mock *MockuserStore
}

// NewMockuserStore creates a new mock instance.
func NewMockuserStore(ctrl *gomock.Controller) *MockuserStore {
	mock := &MockuserStore{ctrl: ctrl}
	mock.recorder = &MockuserStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserStore) EXPECT() *MockuserStoreMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockuserStore) GetUser(ctx context.Context, tx mysql.ContextExecutor, id string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, tx, id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockuserStoreMockRecorder) GetUser(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockuserStore)(nil).GetUser), ctx, tx, id)
}
