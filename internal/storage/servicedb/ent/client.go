// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/sundaytycoon/buttons-api/internal/storage/servicedb/ent/migrate"

	"github.com/sundaytycoon/buttons-api/internal/storage/servicedb/ent/session"
	"github.com/sundaytycoon/buttons-api/internal/storage/servicedb/ent/user"
	"github.com/sundaytycoon/buttons-api/internal/storage/servicedb/ent/userdevice"
	"github.com/sundaytycoon/buttons-api/internal/storage/servicedb/ent/usermeta"
	"github.com/sundaytycoon/buttons-api/internal/storage/servicedb/ent/useroauthprovider"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Session is the client for interacting with the Session builders.
	Session *SessionClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserDevice is the client for interacting with the UserDevice builders.
	UserDevice *UserDeviceClient
	// UserMeta is the client for interacting with the UserMeta builders.
	UserMeta *UserMetaClient
	// UserOAuthProvider is the client for interacting with the UserOAuthProvider builders.
	UserOAuthProvider *UserOAuthProviderClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Session = NewSessionClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserDevice = NewUserDeviceClient(c.config)
	c.UserMeta = NewUserMetaClient(c.config)
	c.UserOAuthProvider = NewUserOAuthProviderClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		Session:           NewSessionClient(cfg),
		User:              NewUserClient(cfg),
		UserDevice:        NewUserDeviceClient(cfg),
		UserMeta:          NewUserMetaClient(cfg),
		UserOAuthProvider: NewUserOAuthProviderClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		Session:           NewSessionClient(cfg),
		User:              NewUserClient(cfg),
		UserDevice:        NewUserDeviceClient(cfg),
		UserMeta:          NewUserMetaClient(cfg),
		UserOAuthProvider: NewUserOAuthProviderClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Session.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Session.Use(hooks...)
	c.User.Use(hooks...)
	c.UserDevice.Use(hooks...)
	c.UserMeta.Use(hooks...)
	c.UserOAuthProvider.Use(hooks...)
}

// SessionClient is a client for the Session schema.
type SessionClient struct {
	config
}

// NewSessionClient returns a client for the Session from the given config.
func NewSessionClient(c config) *SessionClient {
	return &SessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `session.Hooks(f(g(h())))`.
func (c *SessionClient) Use(hooks ...Hook) {
	c.hooks.Session = append(c.hooks.Session, hooks...)
}

// Create returns a create builder for Session.
func (c *SessionClient) Create() *SessionCreate {
	mutation := newSessionMutation(c.config, OpCreate)
	return &SessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Session entities.
func (c *SessionClient) CreateBulk(builders ...*SessionCreate) *SessionCreateBulk {
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Session.
func (c *SessionClient) Update() *SessionUpdate {
	mutation := newSessionMutation(c.config, OpUpdate)
	return &SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SessionClient) UpdateOne(s *Session) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSession(s))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SessionClient) UpdateOneID(id int) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSessionID(id))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Session.
func (c *SessionClient) Delete() *SessionDelete {
	mutation := newSessionMutation(c.config, OpDelete)
	return &SessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SessionClient) DeleteOne(s *Session) *SessionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SessionClient) DeleteOneID(id int) *SessionDeleteOne {
	builder := c.Delete().Where(session.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SessionDeleteOne{builder}
}

// Query returns a query builder for Session.
func (c *SessionClient) Query() *SessionQuery {
	return &SessionQuery{
		config: c.config,
	}
}

// Get returns a Session entity by its id.
func (c *SessionClient) Get(ctx context.Context, id int) (*Session, error) {
	return c.Query().Where(session.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SessionClient) GetX(ctx context.Context, id int) *Session {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SessionClient) Hooks() []Hook {
	return c.hooks.Session
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id string) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id string) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id string) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id string) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMeta queries the meta edge of a User.
func (c *UserClient) QueryMeta(u *User) *UserMetaQuery {
	query := &UserMetaQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usermeta.Table, usermeta.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MetaTable, user.MetaColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOauthProviders queries the oauth_providers edge of a User.
func (c *UserClient) QueryOauthProviders(u *User) *UserOAuthProviderQuery {
	query := &UserOAuthProviderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(useroauthprovider.Table, useroauthprovider.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.OauthProvidersTable, user.OauthProvidersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDevices queries the devices edge of a User.
func (c *UserClient) QueryDevices(u *User) *UserDeviceQuery {
	query := &UserDeviceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userdevice.Table, userdevice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.DevicesTable, user.DevicesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UserDeviceClient is a client for the UserDevice schema.
type UserDeviceClient struct {
	config
}

// NewUserDeviceClient returns a client for the UserDevice from the given config.
func NewUserDeviceClient(c config) *UserDeviceClient {
	return &UserDeviceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userdevice.Hooks(f(g(h())))`.
func (c *UserDeviceClient) Use(hooks ...Hook) {
	c.hooks.UserDevice = append(c.hooks.UserDevice, hooks...)
}

// Create returns a create builder for UserDevice.
func (c *UserDeviceClient) Create() *UserDeviceCreate {
	mutation := newUserDeviceMutation(c.config, OpCreate)
	return &UserDeviceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserDevice entities.
func (c *UserDeviceClient) CreateBulk(builders ...*UserDeviceCreate) *UserDeviceCreateBulk {
	return &UserDeviceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserDevice.
func (c *UserDeviceClient) Update() *UserDeviceUpdate {
	mutation := newUserDeviceMutation(c.config, OpUpdate)
	return &UserDeviceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserDeviceClient) UpdateOne(ud *UserDevice) *UserDeviceUpdateOne {
	mutation := newUserDeviceMutation(c.config, OpUpdateOne, withUserDevice(ud))
	return &UserDeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserDeviceClient) UpdateOneID(id string) *UserDeviceUpdateOne {
	mutation := newUserDeviceMutation(c.config, OpUpdateOne, withUserDeviceID(id))
	return &UserDeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserDevice.
func (c *UserDeviceClient) Delete() *UserDeviceDelete {
	mutation := newUserDeviceMutation(c.config, OpDelete)
	return &UserDeviceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserDeviceClient) DeleteOne(ud *UserDevice) *UserDeviceDeleteOne {
	return c.DeleteOneID(ud.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserDeviceClient) DeleteOneID(id string) *UserDeviceDeleteOne {
	builder := c.Delete().Where(userdevice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeviceDeleteOne{builder}
}

// Query returns a query builder for UserDevice.
func (c *UserDeviceClient) Query() *UserDeviceQuery {
	return &UserDeviceQuery{
		config: c.config,
	}
}

// Get returns a UserDevice entity by its id.
func (c *UserDeviceClient) Get(ctx context.Context, id string) (*UserDevice, error) {
	return c.Query().Where(userdevice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserDeviceClient) GetX(ctx context.Context, id string) *UserDevice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserDevice.
func (c *UserDeviceClient) QueryUser(ud *UserDevice) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ud.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userdevice.Table, userdevice.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userdevice.UserTable, userdevice.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ud.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserDeviceClient) Hooks() []Hook {
	return c.hooks.UserDevice
}

// UserMetaClient is a client for the UserMeta schema.
type UserMetaClient struct {
	config
}

// NewUserMetaClient returns a client for the UserMeta from the given config.
func NewUserMetaClient(c config) *UserMetaClient {
	return &UserMetaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usermeta.Hooks(f(g(h())))`.
func (c *UserMetaClient) Use(hooks ...Hook) {
	c.hooks.UserMeta = append(c.hooks.UserMeta, hooks...)
}

// Create returns a create builder for UserMeta.
func (c *UserMetaClient) Create() *UserMetaCreate {
	mutation := newUserMetaMutation(c.config, OpCreate)
	return &UserMetaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserMeta entities.
func (c *UserMetaClient) CreateBulk(builders ...*UserMetaCreate) *UserMetaCreateBulk {
	return &UserMetaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserMeta.
func (c *UserMetaClient) Update() *UserMetaUpdate {
	mutation := newUserMetaMutation(c.config, OpUpdate)
	return &UserMetaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserMetaClient) UpdateOne(um *UserMeta) *UserMetaUpdateOne {
	mutation := newUserMetaMutation(c.config, OpUpdateOne, withUserMeta(um))
	return &UserMetaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserMetaClient) UpdateOneID(id string) *UserMetaUpdateOne {
	mutation := newUserMetaMutation(c.config, OpUpdateOne, withUserMetaID(id))
	return &UserMetaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserMeta.
func (c *UserMetaClient) Delete() *UserMetaDelete {
	mutation := newUserMetaMutation(c.config, OpDelete)
	return &UserMetaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserMetaClient) DeleteOne(um *UserMeta) *UserMetaDeleteOne {
	return c.DeleteOneID(um.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserMetaClient) DeleteOneID(id string) *UserMetaDeleteOne {
	builder := c.Delete().Where(usermeta.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserMetaDeleteOne{builder}
}

// Query returns a query builder for UserMeta.
func (c *UserMetaClient) Query() *UserMetaQuery {
	return &UserMetaQuery{
		config: c.config,
	}
}

// Get returns a UserMeta entity by its id.
func (c *UserMetaClient) Get(ctx context.Context, id string) (*UserMeta, error) {
	return c.Query().Where(usermeta.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserMetaClient) GetX(ctx context.Context, id string) *UserMeta {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserMeta.
func (c *UserMetaClient) QueryUser(um *UserMeta) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := um.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usermeta.Table, usermeta.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usermeta.UserTable, usermeta.UserColumn),
		)
		fromV = sqlgraph.Neighbors(um.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserMetaClient) Hooks() []Hook {
	return c.hooks.UserMeta
}

// UserOAuthProviderClient is a client for the UserOAuthProvider schema.
type UserOAuthProviderClient struct {
	config
}

// NewUserOAuthProviderClient returns a client for the UserOAuthProvider from the given config.
func NewUserOAuthProviderClient(c config) *UserOAuthProviderClient {
	return &UserOAuthProviderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `useroauthprovider.Hooks(f(g(h())))`.
func (c *UserOAuthProviderClient) Use(hooks ...Hook) {
	c.hooks.UserOAuthProvider = append(c.hooks.UserOAuthProvider, hooks...)
}

// Create returns a create builder for UserOAuthProvider.
func (c *UserOAuthProviderClient) Create() *UserOAuthProviderCreate {
	mutation := newUserOAuthProviderMutation(c.config, OpCreate)
	return &UserOAuthProviderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserOAuthProvider entities.
func (c *UserOAuthProviderClient) CreateBulk(builders ...*UserOAuthProviderCreate) *UserOAuthProviderCreateBulk {
	return &UserOAuthProviderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserOAuthProvider.
func (c *UserOAuthProviderClient) Update() *UserOAuthProviderUpdate {
	mutation := newUserOAuthProviderMutation(c.config, OpUpdate)
	return &UserOAuthProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserOAuthProviderClient) UpdateOne(uop *UserOAuthProvider) *UserOAuthProviderUpdateOne {
	mutation := newUserOAuthProviderMutation(c.config, OpUpdateOne, withUserOAuthProvider(uop))
	return &UserOAuthProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserOAuthProviderClient) UpdateOneID(id string) *UserOAuthProviderUpdateOne {
	mutation := newUserOAuthProviderMutation(c.config, OpUpdateOne, withUserOAuthProviderID(id))
	return &UserOAuthProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserOAuthProvider.
func (c *UserOAuthProviderClient) Delete() *UserOAuthProviderDelete {
	mutation := newUserOAuthProviderMutation(c.config, OpDelete)
	return &UserOAuthProviderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserOAuthProviderClient) DeleteOne(uop *UserOAuthProvider) *UserOAuthProviderDeleteOne {
	return c.DeleteOneID(uop.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserOAuthProviderClient) DeleteOneID(id string) *UserOAuthProviderDeleteOne {
	builder := c.Delete().Where(useroauthprovider.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserOAuthProviderDeleteOne{builder}
}

// Query returns a query builder for UserOAuthProvider.
func (c *UserOAuthProviderClient) Query() *UserOAuthProviderQuery {
	return &UserOAuthProviderQuery{
		config: c.config,
	}
}

// Get returns a UserOAuthProvider entity by its id.
func (c *UserOAuthProviderClient) Get(ctx context.Context, id string) (*UserOAuthProvider, error) {
	return c.Query().Where(useroauthprovider.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserOAuthProviderClient) GetX(ctx context.Context, id string) *UserOAuthProvider {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserOAuthProvider.
func (c *UserOAuthProviderClient) QueryUser(uop *UserOAuthProvider) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := uop.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useroauthprovider.Table, useroauthprovider.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, useroauthprovider.UserTable, useroauthprovider.UserColumn),
		)
		fromV = sqlgraph.Neighbors(uop.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserOAuthProviderClient) Hooks() []Hook {
	return c.hooks.UserOAuthProvider
}
